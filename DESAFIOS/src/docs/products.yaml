paths:
  /api/products:
    get:
      summary: return all products depending on the data sent in request or the filters in the body(pagination of mongoose)
      tags:
        - Products
      parameters:
      - name: limit
        in: path
        required: false
        description: product limit per page
        schema: 
          type: string
      - name: order
        in: path
        required: false
        description:  value to order the products according to the price
        schema:
          type: string
      - name: page
        in: path
        required: false
        description: page to show
        schema:
          type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/PaginationProducts"
      responses:
        "200":
          description: "the products were obtained correctly"
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Product"
        "500":
          description: "on this endpoint, it means that an error occurred in the database, check the search parameters"
    post:
      summary: create a new product only if the user is premium or admin
      tags:
        - Products
      responses:
        "200":
          description: the product was added successfully
        "400":
          description: customer error adding the product
        "403":
          description: role of the client not authorized for said action

  /api/products/{pid}:
    put:
      summary: modify the selected product by id only if the user is premium or admin(the premium cannot delete a product that does not belong to it)
      tags:
        - Products
      parameters:
      - name: pid
        in: path
        required: true
        description: id to get the product
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/UpdateProduct"
      responses:
        "200":
          description: the product was successfully modified
        "403":
          description: role of the client not authorized for said action
        "404":
          description: there is no existing product with that id in the database

    delete:
      summary: delete a product as long as the user is premium or admin (the premium cannot delete a product that does not belong to it)
      tags:
        - Products
      parameters:
      - name: pid
        in: path
        required: true
        description: id to get the product
        schema:
          type: string
      responses:
        "200":
          description: the product was successfully modified
        "403":
          description: role of the client not authorized for said action
        "404":
          description: there is no existing product with that id in the database
        


components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          description: id of mongo
        title:
          type: string
          description: title of product
        description:
          type: string
          description: description of product
        code:
          type: string
          description: code of product, most be unique
        stock:
          type: number
          description: stock of product
        price:
          type: number
          description: price of product
        category:
          type: string
          description: category of product
        img:
          type: string
          description: description of product
        owner:
          type: string
          description: owner of product
        thumbnails:
          type: array
          description: images thumbnails
        status:
          type: boolean
          description: status of product
        created_at:
          type: string
          format: date-time
          description: creation date autogenerated by mongo
        updated_at:
          type: string
          format: date-time
          description: modification date autogenerated by mongo
        __v:
          type: number
          description: mongoose version control
      example:
        _id: ObjectId("fewfwqefwefwefweqf0165")
        title: "Blue t-shirt"
        description: "Omg, this is a greate blue tshirt"
        code: "fffewf484"
        status: true
        category: "Clothes"
        price: 123456
        img: "htttp://fewfwefwefwefwef"
        thumbnails: []
        created_at: "2023-08-22T21:56:44.657Z"
        updated_at: "2023-08-22T21:56:44.657Z"
        __v: 0
        owner: "Admin"
  requestBodies:
    UpdateProduct:
      type: object
      properties:
        thumbnails:
          type: array
          description: images thumbnails
        status:
          type: boolean
          description: status of product
        title:
          type: string
          description: title of product
        description:
          type: string
          description: description of product
        code:
          type: string
          description: code of product, most be unique
        stock:
          type: number
          description: stock of product
        price:
          type: number
          description: price of product
        category:
          type: string
          description: category of product
        img:
          type: string
          description: description of product
    PaginationProducts:
      type: object
      properties:
        category:
          type: string
          description: filter products by category


